#+TITLE: emacs configuration
#+STARTUP: overview

* package support
   Add melpa support

   if there are issues with elpa, try this [[https://emacs.stackexchange.com/questions/233/how-to-proceed-on-package-el-signature-check-failure][{source}]]: 
   1. set-variable 'package-check-signature' to nil
   2. install package 'gnu-elpa-keyring-update'
   3. reset package-check-signature to the default value 'allow-unsigned

   #+BEGIN_SRC emacs-lisp
(require 'package)

;; Add melpa package sourhttps://www.emacswiki.org/emacs/BookMarksce when using package list
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
  (add-to-list 'package-archives (cons "melpa" url) t))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this line

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
   #+END_SRC

* basic appearance
** remove visual clutter
   #+BEGIN_SRC emacs-lisp
;; disable startup screen
(setq inhibit-startup-screen t)

;; disable toolbar
(tool-bar-mode -1)

;; disable scrollbar
(toggle-scroll-bar -1)
   #+END_SRC
** set font
   #+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Pragmata Pro"
                    :height 110
                    :weight 'normal
                    :width 'normal)

   #+END_SRC
** colortheme
   #+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :defer t
  :init
  (load-theme 'spacemacs-light t))

   #+END_SRC
** enable line numbers
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode t)
   #+END_SRC

* set default behaviour
** load additional config
load file 'local.el' if it exists, not checked into git
   #+BEGIN_SRC emacs-lisp
   (let ((local-settings "~/.emacs.d/local.el"))
    (when (file-exists-p local-settings)
      (load-file local-settings))
   )
   #+END_SRC
** disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** buffer menu
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'buffer-menu)
   #+END_SRC
** transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** backup files
all backup files get sent to /emacs.d/backups to not clutter the file system
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   (setq delete-old-versions -1)
   (setq version-control t)
   (setq vc-make-backup-files t)
   (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC
** enable selection with mouse
   #+BEGIN_SRC emacs-lisp
   (defun mouse-start-rectangle (start-event)
     (interactive "e")
     (deactivate-mark)
     (mouse-set-point start-event)
     (rectangle-mark-mode +1)
     (let ((drag-event))
       (track-mouse
         (while (progn
                  (setq drag-event (read-event))
                  (mouse-movement-p drag-event))
           (mouse-set-point drag-event)))))

   (global-set-key (kbd "S-<down-mouse-1>") #'mouse-start-rectangle)
   #+END_SRC
** jump to emacs config
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c e") '(lambda ()
                              (interactive)
                              (find-file "~/.emacs.d/emacs.org")))
   #+END_SRC
** brackets
   auto close and highlight brackets
   #+BEGIN_SRC emacs-lisp
   ;; autoclose brackets
   (electric-pair-mode 1)

   ;; highlight brackets
   (setq show-paren-delay 0)
   (show-paren-mode 1)
   #+END_SRC
** spaces over tabs
   else e.g. anible files will fail
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** use pdflatex for tex
   #+BEGIN_SRC emacs-lisp
   (setq latex-run-command "pdflatex")
   #+END_SRC
** window management
   when splitting window open the last buffer in split
#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'vsplit-last-buffer)
(bind-key "C-x 3" 'hsplit-last-buffer)
#+END_SRC
** orgmode settings
*** orgfile path
 can be overwritten with custom.el
    #+BEGIN_SRC emacs-lisp
    (setq orgfile-path '("~/Sync/org/"))
    #+END_SRC
*** export org file headings into org files
    #+BEGIN_SRC emacs-lisp
    (defun org-file-from-subtree (&optional name)
      "Copy the subtree currently being edited and create a new file
    from it. Ask for directory.

    If called with the universal argument, prompt for new filename,
    otherwise use the subtree title."
      (interactive "P")
      (org-back-to-heading)
      (let ((filename (cond
                       (current-prefix-arg
                        (expand-file-name
                         (read-file-name "New file name: ")))
                       (t
                        (concat
                         (expand-file-name
                          (org-element-property :title
                                                (org-element-at-point))
                          (read-directory-name "Directory:"))
                         ".org")))))
        (org-copy-subtree)
        (find-file-noselect filename)
        (with-temp-file filename
          (org-mode)
          (yank)
          (beginning-of-buffer)
          (kill-whole-line)
          ;;(org-promote-subtree)
          )))
    #+END_SRC
*** open orgfolder with dired
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f2>")
      (lambda ()
        (interactive)
        (dired "~/Sync/org")))

    #+END_SRC
*** refile into datetree
    #+BEGIN_SRC emacs-lisp
    (defun org-refile-to-datetree (&optional file)
      "Refile a subtree to a datetree corresponding to it's timestamp.

    The current time is used if the entry has no timestamp. If FILE
    is nil, refile in the current file."
      (interactive "f")
        (let* ((datetree-date (or (org-entry-get nil "TIMESTAMP_IA" t)
                                (org-read-date t nil "now")))
             (date (org-date-to-gregorian datetree-date))
             )
        (save-excursion
          (with-current-buffer (current-buffer)
            (org-cut-subtree)
            (if file (find-file file))
            (org-datetree-find-date-create date)
            (org-narrow-to-subtree)
            (show-subtree)
            (org-end-of-subtree t)
            (newline)
            (goto-char (point-max))
            (org-paste-subtree 4)
            (widen)
            ))
        )
      )

    (global-set-key (kbd "C-c C-d") #'org-refile-to-datetree)

    #+END_SRC
* config packages
** switch window
switch windows via C-x o (and M-o) and pick via assigned letter
#+BEGIN_SRC emacs-lisp
(use-package switch-window
      :ensure t
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
		'("a" "s" "d" "f" "j" "k" "l"))
      :bind(([remap other-window] . switch-window) ; standard C-x o
            ("M-o" . switch-window)))
#+END_SRC
** godmode
   enter emacs commands without modifier keys, toggle with escape
    #+BEGIN_SRC emacs-lisp
    (use-package god-mode
      :ensure t
      :bind ("<escape>" . god-local-mode))
    #+END_SRC
** ido mode
    #+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t 
  :config
  (progn
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)))

    #+END_SRC
** ace-jump-mode
    #+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t 
  :bind ("C-." . ace-jump-mode))

    #+END_SRC
** orgmode
    #+BEGIN_SRC emacs-lisp
;; set custom todo states
(setq org-todo-keywords 
  '((sequence "TODO" "DOING" "BLOCKED" "|" "DONE")))

;; show line wraps
(setq org-startup-truncated nil)

;; all child tasks must be 'done' for parent to be marked 'done'
(setq org-enforce-todo-dependencies t)

;; don't show done items in agenda
(setq org-agenda-skip-scheduled-if-done t)

;; set source for agenda
(setq org-agenda-files orgfile-path)

;; theme source blocks like in native mode
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)

;; define capture
(define-key global-map "\C-cc" 'org-capture)

;; capture templates
;; https://orgmode.org/manual/Template-expansion.html#Template-expansion
(setq org-capture-templates
      '(
	;;("t" "Name" entry (file+headline "path/to/file.org" "Tasks")
	;; "* TODO %?\n %i\n")
        ("r" "Recipe" entry (file "~/Sync/org/rezepte.org")
        "* %? %^G \n:PROPERTIES:\n:Quelle:\n:Menge:\n:Dauer:\n:Kalorien:\n:END:\n** Zutaten\n** Zubereitung\n"
        :jump-to-captured t)
 ))
;; use org-bullets-mode for utf8 symbols as org bullets
(use-package org-bullets
  :ensure t
  :init
  (setq org-bullets-bullet-list
	'("●" "◉" "◍" "○" "✸"))
  :hook (org-mode . org-bullets-mode))

    #+END_SRC
** dashboard
    #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      ;; only show dasboard if opening emacs without file
      :if (< (length command-line-args) 2)
      :diminish dashboard-mode
      :config
      (setq dashboard-banner-logo-title "YOUR ADD HERE")
      (setq dashboard-set-footer nil)
      (setq dashboard-startup-banner "~/.emacs.d/dasboard-logo.png")
      (setq dashboard-items '((bookmarks . 10)
                              (agenda . 5)                            
                              (projects . 5)
                              (recents . 0)
                              (registers . 5)))
      (setq dashboard-center-content t)
      (dashboard-setup-startup-hook))
    #+END_SRC
** projectile
    #+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1)
  ;;change neotree root on project change
  (setq projectile-switch-project-action 'neotree-projectile-action))
    #+END_SRC
** magit
    #+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
    #+END_SRC
** ivy
    #+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config (ivy-mode 1))
    #+END_SRC
** counsel
    #+BEGIN_SRC emacs-lisp
    ;; counsel should load ivy as dep
    (use-package counsel
      :ensure t
      :bind (
             ("C-x C-f" . counsel-find-file)
             ("C-s" . swiper)
             ("M-y" . counsel-yank-pop)
             ("M-x" . counsel-M-x))
      :config 
      (setq projectile-completion-system 'ivy)
      (setq magit-completing-read-function 'ivy-completing-read))
    ;; add https://github.com/ericdanan/counsel-projectile ?

    #+END_SRC
** counsel-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile
        :ensure t
        :config
        (counsel-projectile-mode)
        :bind("C-c p" . projectile-command-map))
#+END_SRC

** smex
    #+BEGIN_SRC emacs-lisp
;; use smex for M-x enhancement
(use-package smex
  :ensure t)
    #+END_SRC
** all-the icons
    iconset
    #+BEGIN_SRC emacs-lisp
;; run 'M-x all-the-icons-install-fonts' to install all fonts
(use-package all-the-icons
  :ensure t)

    #+END_SRC
** neotree
    #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :bind ("<f1>" . neotree-toggle)
      :config 
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
      (setq neo-mode-line-type 'none))

    #+END_SRC
** git-gutter
    #+BEGIN_SRC emacs-lisp
;; show changes from git
(use-package git-gutter-fringe+
  :ensure t
  :config
  (global-git-gutter+-mode)
  (setq git-gutter-fr+-side 'left-fringe)
  (set-face-foreground 'git-gutter-fr+-modified "#4f97d7")
  (set-face-foreground 'git-gutter-fr+-added    "#293235")
  (set-face-foreground 'git-gutter-fr+-deleted  "#f2241f"))

    #+END_SRC
** which key
after pressing e.g. ~C-x~ wait a bit to see popup with possible shortcuts

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t 
  :config
  (which-key-mode))
#+END_SRC 
** multiple cursors
edit multiple lines at once
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("M-." . mc/mark-next-like-this)
         ("M-," . mc/unmark-next-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC
** editorconfig
   auto-enforced consistence
   #+BEGIN_SRC emacs-lisp
    (use-package editorconfig
      :ensure t
      :diminish "↹"
      :init
      (setq auto-mode-alist
            (cl-union auto-mode-alist
                      '(("\\.editorconfig\\'" . editorconfig-conf-mode)
                        ("editorconfig\\'"  . editorconfig-conf-mode))))
      :config
      (editorconfig-mode 1))
   #+END_SRC
** flycheck
enable flycheck in every mode
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
** LSP
   use language server protocol to have more ide features in emacs

   #+BEGIN_SRC emacs-lisp
       (use-package lsp-mode
         :ensure t
         ;; currently set hooks in matching mode
         ;;:hook ((js2-mode . lsp)
         ;;       (vue-mode . lsp))
         :commands lsp lsp-deferred
         :init (setq lsp-keymap-prefix "C-c l")
         :config
         (setq lsp-prefer-flymake nil)) ;; prefer using lsp-ui (flycheck) over flymake.)

       (use-package lsp-ui
         :ensure t
         :requires lsp-mode flycheck
         :hook (lsp-mode . lsp-ui-mode)
         :commands lsp-ui-mode
         :custom (lsp-ui-sideline-show-code-actions nil))
   #+END_SRC
** company

    autocomplete mode, use everywhere

    #+BEGIN_SRC emacs-lisp
;; company mode autocomplete
(use-package company
  :ensure t
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
  ;; use company mode everywhere
  :hook (after-init . global-company-mode))
    #+END_SRC
** emojify
   use emojis everywhere

   #+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
   #+end_src
** doom-modeline
doom emacs modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* language support
  all language specific modes/packages are configured here
** web-mode
    #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config (progn
	    (add-to-list 'auto-mode-alist '("\\.njs\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.njk\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
            (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
	    (setq web-mode-markup-indent-offset 2)
	    (setq web-mode-code-indent-offset 2)
	    (setq web-mode-css-indent-offset 2)
	    (setq web-mode-script-padding 2)
	    ;; highlight columns
	    (setq web-mode-enable-current-column-highlight t)
	    (setq web-mode-enable-current-element-highlight t))
  :init
  (add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode))
    #+END_SRC
** emmet
    #+BEGIN_SRC emacs-lisp
    (use-package emmet-mode
      :ensure t
      :hook ((web-mode . emmet-mode))
      :init
      ;; toggle autocompletion on inline css
      (add-hook 'web-mode-before-auto-complete-hooks
        '(lambda ()
         (let ((web-mode-cur-language
                (web-mode-language-at-pos)))
                   (if (string= web-mode-cur-language "css")
               (setq emmet-use-css-transform t)
               (setq emmet-use-css-transform nil))))))

    #+END_SRC
** javascript

   install js lsp server and other niceties: =npm install -g prettier eslint typescript typescript-language-server=

   #+BEGIN_SRC emacs-lisp
   (use-package js2-mode
     :ensure t
     :mode ("\\.js\\'")
     :hook (js2-mode . lsp-deferred)
     :init
     (setq-default js2-ignored-warnings '("msg.extra.trailing.comma"
                                          "msg.missing.semi"
                                          "msg.no.side.effects"))
     :config
     ;; have 2 space indentation by default
     (setq js-indent-level 2
           js2-basic-offset 2
           js-chain-indent t))
   #+END_SRC
** vue via polymode

   install vue lsp server: =npm install -g vls=

   use polymode to use multiple mode inside a vue file

   copied from [[https://gist.github.com/SjB/07cdce0f1fba171704d93c2989077f4d][here]]

   #+BEGIN_SRC emacs-lisp

(use-package polymode
        :ensure t
        :defer t
        :hook (vue-mode . lsp-deferred)
        :mode ("\\.vue\\'" . vue-mode)
        :config
        (define-innermode poly-vue-template-innermode
          :mode 'html-mode
          :head-matcher "^<[[:space:]]*\\(?:template\\)[[:space:]]*>"
          :tail-matcher "^</[[:space:]]*\\(?:template\\)[[:space:]]*>"
          :head-mode 'host
          :tail-mode 'host)

        (define-innermode poly-vue-script-innermode
          :mode 'js-mode
          :head-matcher "<[[:space:]]*\\(?:script\\)[[:space:]]*>"
          :tail-matcher "</[[:space:]]*\\(?:script\\)[[:space:]]*>"
          :head-mode 'host
          :tail-mode 'host)

        (define-auto-innermode poly-vue-template-tag-lang-innermode
          :head-matcher "^<[[:space:]]*\\(?:template\\)[[:space:]]*lang=[[:space:]]*[\"'][[:space:]]*[[:alpha:]]+[[:space:]]*[\"'][[:space:]]*>"
          :tail-matcher "^</[[:space:]]*\\(?:template\\)[[:space:]]*>"
          :mode-matcher (cons  "^<[[:space:]]*\\(?:template\\)[[:space:]]*lang=[[:space:]]*[\"'][[:space:]]*\\([[:alpha:]]+\\)[[:space:]]*[\"'][[:space:]]*>" 1)
          :head-mode 'host
          :tail-mode 'host)

        (define-auto-innermode poly-vue-script-tag-lang-innermode
          :head-matcher "<[[:space:]]*\\(?:script\\)[[:space:]]*lang=[[:space:]]*[\"'][[:space:]]*[[:alpha:]]+[[:space:]]*[\"'][[:space:]]*>"
          :tail-matcher "</[[:space:]]*\\(?:script\\)[[:space:]]*>"
          :mode-matcher (cons  "<[[:space:]]*\\(?:script\\)[[:space:]]*lang=[[:space:]]*[\"'][[:space:]]*\\([[:alpha:]]+\\)[[:space:]]*[\"'][[:space:]]*>" 1)
          :head-mode 'host
          :tail-mode 'host)

        (define-auto-innermode poly-vue-style-tag-lang-innermode
          :head-matcher "<[[:space:]]*\\(?:style\\)\\(?:scoped\\|[[:space:]]\\)*lang=[[:space:]]*[\"'][[:space:]]*[[:alpha:]]+[[:space:]]*[\"']*\\(?:scoped\\|[[:space:]]\\)*>"
          :tail-matcher "</[[:space:]]*\\(?:style\\)[[:space:]]*>"
          :mode-matcher (cons  "<[[:space:]]*\\(?:style\\)\\(?:scoped\\|[[:space:]]\\)*lang=[[:space:]]*[\"'][[:space:]]*\\([[:alpha:]]+\\)[[:space:]]*[\"']\\(?:scoped\\|[[:space:]]\\)*>" 1)
          :head-mode 'host
          :tail-mode 'host)

        (define-innermode poly-vue-style-innermode
          :mode 'css-mode
          :head-matcher "<[[:space:]]*\\(?:style\\)[[:space:]]*\\(?:scoped\\|[[:space:]]\\)*>"
          :tail-matcher "</[[:space:]]*\\(?:style\\)[[:space:]]*>"
          :head-mode 'host
          :tail-mode 'host)

        (define-polymode vue-mode
          :hostmode 'poly-sgml-hostmode
          :innermodes '(
                        poly-vue-template-tag-lang-innermode
                        poly-vue-script-tag-lang-innermode
                        poly-vue-style-tag-lang-innermode
                        poly-vue-template-innermode
                        poly-vue-script-innermode
                        poly-vue-style-innermode
                        )))
   #+END_SRC


